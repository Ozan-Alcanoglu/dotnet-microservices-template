using MassTransit;
using CSMVCK8S.Shared.Events;
using Microsoft.Extensions.Logging;
using Minio;
using Minio.DataModel.Args;

namespace ProductService.Consumers;

public class PhotoUploadConsumer : IConsumer<PhotoReadyForUploadEvent>
{
    private readonly ILogger<PhotoUploadConsumer> _logger;
    private readonly IMinioClient _minioClient;
    private readonly IPublishEndpoint _publishEndpoint; // ‚¨ÖÔ∏è BUNU EKLE

    public PhotoUploadConsumer(
        ILogger<PhotoUploadConsumer> logger, 
        IMinioClient minioClient,
        IPublishEndpoint publishEndpoint) // ‚¨ÖÔ∏è BUNU EKLE
    {
        _logger = logger;
        _minioClient = minioClient;
        _publishEndpoint = publishEndpoint; // ‚¨ÖÔ∏è BUNU EKLE
    }

    public async Task Consume(ConsumeContext<PhotoReadyForUploadEvent> context)
    {
        var photo = context.Message;
        
        _logger.LogInformation("üì§ MinIO'ya fotoƒüraf y√ºkleniyor: {PhotoId}", photo.PhotoId);

        try
        {
            // 1. Bucket kontrol√º ve olu≈üturma
            var bucketExists = await _minioClient.BucketExistsAsync(new BucketExistsArgs().WithBucket("photos"));
            if (!bucketExists)
            {
                await _minioClient.MakeBucketAsync(new MakeBucketArgs().WithBucket("photos"));
                _logger.LogInformation("‚úÖ 'photos' bucket olu≈üturuldu");
            }

            // 2. Fotoƒürafƒ± MinIO'ya y√ºkle
            using var stream = new MemoryStream(photo.FileData);
            
            await _minioClient.PutObjectAsync(new PutObjectArgs()
                .WithBucket("photos")
                .WithObject(photo.MinioObjectId)
                .WithStreamData(stream)
                .WithObjectSize(stream.Length)
                .WithContentType(photo.ContentType));

            _logger.LogInformation("‚úÖ Fotoƒüraf MinIO'ya y√ºklendi: {PhotoId} - {ObjectId}", 
                photo.PhotoId, photo.MinioObjectId);

            // 3. ‚úÖ STATUS G√úNCELLE: Ba≈üarƒ±lƒ± event g√∂nder
            _logger.LogInformation("üì® PhotoUploadCompletedEvent g√∂nderiliyor: {PhotoId}", photo.PhotoId);
            
            await _publishEndpoint.Publish(new PhotoUploadCompletedEvent // ‚¨ÖÔ∏è _publishEndpoint kullan
            {
                PhotoId = photo.PhotoId,
                Status = "completed",
                MinioUrl = $"http://minio-service:9000/photos/{photo.MinioObjectId}"
            });

            _logger.LogInformation("‚úÖ PhotoUploadCompletedEvent g√∂nderildi: {PhotoId}", photo.PhotoId);

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå MinIO'ya fotoƒüraf y√ºkleme hatasƒ±: {PhotoId}", photo.PhotoId);
            
            // 4. ‚úÖ HATA DURUMU: Failed event g√∂nder
            await _publishEndpoint.Publish(new PhotoUploadCompletedEvent // ‚¨ÖÔ∏è _publishEndpoint kullan
            {
                PhotoId = photo.PhotoId,
                Status = "failed",
                ErrorMessage = ex.Message
            });

            _logger.LogInformation("üì® Failed event g√∂nderildi: {PhotoId}", photo.PhotoId);
        }
    }
}